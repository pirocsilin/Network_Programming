<!DOCTYPE html>
<html lang="en">

<head>

  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="">
  <meta name="author" content="do.sibsutis.ru">

  <title>ТЕМА 2. Конспект лекций</title>
	
	<link rel="icon" type="image/png" href="../lib/css/favicon.png">
  <!-- Bootstrap Core CSS -->
  <link href="../lib/css/bootstrap.css" rel="stylesheet">
	
  <!-- Custom CSS -->
  <link href="../lib/css/scrolling-nav.css" rel="stylesheet">

  <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
  <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
  <!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
    <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
  <![endif]-->
</head>

<!-- The #page-top ID is part of the scrolling feature - the data-spy and data-target are part of the built-in Bootstrap scrollspy function -->

<body id="page-top" data-spy="scroll" data-target=".navbar-fixed-top">
  <!-- Navigation -->
<nav class="navbar navbar-default navbar-fixed-top">
 <div class="container">
  <!-- Brand and toggle get grouped for better mobile display -->
  <div class="navbar-header">
   <li class="hidden"> <a class="page-scroll" href="#page-top"></a> </li>
	 
	 <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false">
    <span class="icon-bar"></span>
    <span class="icon-bar"></span>
    <span class="icon-bar"></span>
   </button>
	 
   <a class="navbar-brand " href="../index.htm"> 
  <text class = "hidden-xs">Сетевое программирование</text> 
  <text class = "visible-xs">СП</text>
	 </a>
  </div>

  <!-- Collect the nav links, forms, and glyphicon glyphicon-list-alt content for toggling -->
  <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
   
	 <!-- <ul class="nav navbar-nav">
		<li><a href="#"></a></li> 
   </ul> -->
	
   <ul class="nav navbar-nav navbar-right">
    <li class="dropdown">
		<button type="button" class="navbar-toggle dropdown-toggle hidden-xs" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">
			<span class="icon-bar"></span>
			<span class="icon-bar"></span>
			<span class="icon-bar"></span>
		</button>	   
		<a class = "dropdown-toggle visible-xs" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Материалы</a>
     <ul class="dropdown-menu">
<li><a href="../index.htm">Аннотация курса</a></li>

      <li role="separator" class="divider"></li>
    
  <li><a href="lec_index.htm">Теория</a></li>
   
   <li><a href="c_work.htm">Курсовая работа</a></li>
 
<li><a href="labs.htm">Лабораторные работы</a></li> 
    <li role="separator" class="divider"></li>
  
    
    <li><a href="lit.htm">Литература</a></li>
 
      <!--li><a href="q.htm">Вопросы для самопроверки</a></li-->			
     </ul>
 </li>
 </ul>
  </div><!-- /.navbar-collapse -->
 </div><!-- /.container-fluid -->
</nav>


  <div id="intro" class="section content-section ">
    <div class="container">
       <div class="row">
        <div class="col-lg-12">	


<!-- содержание -->	
<div class="page-header">				
<h3><a href="#">ТЕМА 2. ПРОТОКОЛЫ КАК ОСНОВА СЕТЕВОГО ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ. МОДЕЛЬ OSI. ИЕРАРХИЯ ПРОТОКОЛОВ </a></h3>
<a href="#1" class=punkt>2.1. Основные понятия протоколов</a><br>
<a href="#2" class=punkt>2.2. Модель OSI</a><br>
</div>
<!--начало-->
<a name=1 class="anchor"></a>
<h3>2.1. Основные понятия протоколов</h3>
<p>В общем случае задача сетевого программного обеспечения состоит в обслуживании процессов обмена между машинами сети. Для обеспечения различного рода связи между происходящими в сети процессами, необходимо установить определённые правила, руководящие взаимодействиями и гарантирующие их упорядоченный ход. Множество таких правил называется – протоколами. На протоколы возложено руководство происходящими в сети процессами, их взаимодействие между собой и упорядоченный ход. Сетевое программное обеспечение реализует принятые в сетях протоколы.</p>
<p>Протоколы регламентируют: </p>
<ul>
<li>	установление и вызов связи между процессами, снятие этих соединений между процессами, снятие этих соединений, прерывание связи с любого конца, когда это необходимо;</li>
<li>	передачу сообщений, когда соединения, когда соединения уже установлены и представление программ, файлов и т.п. в виде последовательности сообщений.</li>
</ul>
<br>
<a name=2 class="anchor"></a>
<h3>2.2. Модель OSI</h3>
<p>С целью стандартизации сетей и для помощи производителям в стандартизации и интегрировании производимого сетевого программного обеспечения, Международная организация по стандартизации (ISO, International Standart Organization) в 1984 году определила программную модель пересылки сообщений между компьютерами. Эта модель получила название опорной модели взаимодействия открытых систем - Open Systems Interconnection (OSI) reference model [1]. В модели OSI определены семь уровней программного обеспечения, как показано на рис.2.1.</p>
<p><img src="img/image003.gif"></p>
<p>Рис.2.1. Семиуровневая модель OSI</p>
<br>
<p>Модель OSI имеет иерархическую структуру. Взаимосвязь одноименных уровней регламентируется протоколом. Взаимосвязь соседних слоев определяется стандартами, именуемыми интерфейсами. Взаимодействие уровней в этой модели – субординарное. Каждый уровень может реально непосредственно взаимодействовать только с соседними уровнями (верхним и нижним), виртуально (опосредовано) – только с аналогичным уровнем на другом конце линии. </p>
<p>Каждый уровень обслуживает свою часть процесса взаимодействия. Благодаря такой структуре совместная работа сетевого оборудования и программного обеспечения становится гораздо проще и прозрачнее. Рассмотрим функции каждого из уровней.</p>
<p><i>Физический уровень</i> предназначен непосредственно для передачи потока данных. Определяет характеристики оборудования, преобразующие передаваемые данные в физический сигнал, передающийся по кабелю. На этом уровне определяются уровни напряжения и конкретные контакты разъема.</p>
<p>Осуществляет передачу электрических или оптических сигналов в кабель или в радиоэфир и, соответственно, их приём и преобразование в биты данных в соответствии с методами кодирования цифровых сигналов. Другими словами, осуществляет интерфейс между сетевым носителем и сетевым устройством.</p>
<p>На этом уровне работают концентраторы (хабы), повторители (ретрансляторы) сигнала и медиаконверторы.</p>
<p>Функции физического уровня реализуются на всех устройствах, подключенных к сети. Со стороны компьютера функции физического уровня выполняются сетевым адаптером или последовательным портом. К физическому уровню относятся физические, электрические и механические интерфейсы между двумя системами. Физический уровень определяет такие свойства среды сети передачи данных как оптоволокно, витая пара, коаксиальный кабель, спутниковый канал передач данных и т.п. Стандартными типами сетевых интерфейсов, относящимися к физическому уровню, являются: V.35, RS-232C, RS-485, RJ-11, RJ-45, разъемы AUI и BNC.</p>
<p>Примерами протоколов могут быть: USB, EIA RS-232, EIA-422, EIA-423, RS-449, RS-485, Ethernet (включая 10BASE-T, 10BASE2, 10BASE5, 100BASE-TX, 100BASE-FX, 100BASE-T, 1000BASE-T, 1000BASE-SX и другие), 802.11Wi-Fi, DSL, Firewire.</p>
<p><i>Канальный уровень</i> предназначен для обеспечения взаимодействия сетей на физическом уровне и контроля над ошибками, которые могут возникнуть. Полученные с физического уровня данные он упаковывает во фреймы, проверяет на целостность, если нужно исправляет ошибки (посылает повторный запрос поврежденного кадра) и отправляет на сетевой уровень. Канальный уровень может взаимодействовать с одним или несколькими физическими уровнями, контролируя и управляя этим взаимодействием. Спецификация IEEE 802 разделяет этот уровень на 2 подуровня – MAC (Media Access Control) регулирует доступ к разделяемой физической среде, LLC (Logical Link Control) обеспечивает обслуживание сетевого уровня. На этом уровне работают коммутаторы, мосты.</p>
<p>К функциям протокола относятся:</p>
<p>- управление процедурами установления и прекращения связи;</p>
<p>- упаковка передаваемой информации в кадры перед ее передачей и разупаковка информации при приеме;</p>
<p>- генерация и чтение управляющих кадров;</p>
<p>- обеспечение прозрачности информационного канала;</p>
<p>- прием и передача подтверждений;</p>
<p>- повторная передача кадров потерянных или с ошибками.</p>
<p>Примерами являются протоколы  ВSC, HDLС.</p>
<p>Протоколы: BSC, ARCnet, ATM, Ethernet, Fiber Distributed Data Interface (FDDI), Frame Relay, High-Level Data Link Control (HDLC), IEEE 802.2 (provides LLC functions to IEEE 802 MAC layers), IEEE 802.11 wireless LAN, Point-to-Point Protocol (PPP), Serial Line Internet Protocol (SLIP) (obsolete), StarLan, Token ring, x.25.</p>
<p>В программировании этот уровень представляет драйвер сетевой платы. В операционных системах имеется программный интерфейс взаимодействия канального и сетевого уровней между собой. Примеры таких интерфейсов: ODI, NDIS</p>
<p><i>Сетевой уровень </i>управляет соединениями через сети и делает прозрачными для протоколов верхнего уровня детали самой сети. Этот уровень сетевой модели OSI предназначен для определения пути передачи данных. Отвечает за трансляцию логических адресов и имён в физические, определение кратчайших маршрутов, коммутацию и маршрутизацию, отслеживание неполадок и заторов в сети. На этом уровне работает такое сетевое устройство, как маршрутизатор. Сетевой уровень обеспечивает:</p>
<ul>
<li>	выбор маршрута;</li>
<li>	управление потоком данных в сети;</li>
<li>	буферизацию данных.</li>
</ul>
<p>Пример: IP/IPv4/IPv6 (Internet Protocol), IPX (Internetwork Packet Exchange, протокол межсетевого обмена), X.25 (частично этот протокол реализован на уровне 2), ICMP (Internet Control Message Protocol), RIP (Routing Information Protocol).</p>
<p><i>Транспортный уровень</i> гарантирует, что получатель получит данные точно в таком виде, в каком они были отправлены. Разделяет сообщения на пакеты на передающем конце и осуществляет сборку на приемном. Обеспечивает согласование сетевых уровней различных несовместимых между собой сетей через специальные шлюзы. Примером могут служить протоколы TCP, UDP, SPX.</p>
<p>Существует множество классов протоколов транспортного уровня, начиная от протоколов, предоставляющих только основные транспортные функции (например, функции передачи данных без подтверждения приема), и заканчивая протоколами, которые гарантируют доставку в пункт назначения нескольких пакетов данных в надлежащей последовательности, мультиплексируют несколько потоков данных, обеспечивают механизм управления потоками данных и гарантируют достоверность принятых данных.</p>
<p>Мультиплексирование (multiplexing) данных означает, что транспортный уровень способен одновременно обрабатывать несколько потоков данных (потоки могут поступать и от различных приложений) между двумя системами. Механизм управления потоком данных – это механизм, позволяющий регулировать количество данных, передаваемых от одной системы к другой. Протоколы транспортного уровня часто имеют функцию контроля доставки данных, заставляя принимающую данные систему отправлять подтверждения передающей стороне о приеме данных.</p>
<p><i>Сеансовый уровень</i> выполняет управление обменами меду рабочими станциями, которые участвуют в сеансе связи, позволяя приложениям взаимодействовать между собой длительное время. На этом уровне осуществляется управление доступом на основе прав доступа. Уровень управляет созданием/завершением сеанса, обменом информацией, синхронизацией задач, определением права на передачу данных и поддержанием сеанса в периоды неактивности приложений. Синхронизация передачи обеспечивается помещением в поток данных контрольных точек, начиная с которых возобновляется процесс при нарушении взаимодействия.</p>
<p><i>Уровень представлений</i> определяет форматы данных, алфавиты и коды, представление специальных и графических символов, описывает шифрование данных, их сжатие и кодовое преобразование. Этот уровень отвечает за преобразование протоколов и кодирование/декодирование данных. Запросы приложений, полученные с уровня приложений, он преобразует в формат для передачи по сети, а полученные из сети данные преобразует в формат, понятный приложениям. На этом уровне может осуществляться сжатие/распаковка или кодирование/декодирование данных, а также перенаправление запросов другому сетевому ресурсу, если они не могут быть обработаны локально.</p>
<p><i>Уровень приложений</i> обслуживает задачи пользователя и прикладное ПО по передаче данных через сеть и доступу к сетевым ресурсам. Это верхний уровень модели. Он обеспечивает взаимодействие сети и пользователя. Уровень разрешает приложениям пользователя иметь доступ к сетевым службам, таким как обработчик запросов к базам данных, доступ к файлам, пересылке электронной почты. Также отвечает за передачу служебной информации, предоставляет приложениям информацию об ошибках и формирует запросы к уровню представления. Пример: HTTP, POP3, SMTP, FTP, DNS, MODBUS</p>


<br><br>
<!--конец-->
      
				

				</div>
			</div>
			
      </div>
    </div>
  </div>
	
	<!--Меню навигации по Темам -->	
	<div aria-label="..." class = "nav-menu">
	 <ul class="pager background-transition-slow">
		 <li title="Наверх" style = "margin-right:15px;	"><a class = "glyphicon glyphicon-menu-up page-scroll" href="#page-top"></a></li>
		 <li title="К предыдущей лекции"><a class = "glyphicon glyphicon-menu-left page-scroll" href="lec1.htm"></a></li>
		 <li title="В содержание"><a class = "glyphicon glyphicon-list-alt" href="lec_index.htm"></a></li>
		 <li title="К следующей лекции"><a class = "glyphicon glyphicon-menu-right page-scroll" href="lec3.htm"></a></li>
	 </ul>
	</div>
	<!---->
	
	</div>
  <!-- jQuery -->
  <script src="../lib/js/jquery.js"></script>

  <!-- Bootstrap Core JavaScript -->
  <script src="../lib/js/bootstrap.min.js"></script>

  <!-- Scrolling Nav JavaScript -->
  <script src="../lib/js/jquery.easing.min.js"></script>
  <script src="../lib/js/scrolling-nav.js"></script>

</body>

</html>
